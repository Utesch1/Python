1. Задание
Какие из данных функций - высшего порядка?

  > map
  > filter

  
2. Задание
Расположите элементы в порядке из следование в списке, который вернёт функция sorted(["c", "bb", "aaa", "dddd"], key=lambda k: -len(k)):

  > "dddd"
  > "aaa"
  > "bb"
  > "c"

  
3. Задание
Отнесите следующие концепции к императивному или функциональному программированию:
  
  # Императивный
  > Инструкции выполняются последовательно
  > Данные полученные при выполнении предыдущих инструкций могут читаться следующими инструкциями

  # Функциональный
  > Реализуется модель вычисления без состояний
  > Функции не производят побочных эффектов
    
    
4. Задание
Что из этого есть в Python:
  > Лямбда-выражения
  > Рекурсия
  > Функции высшего порядка
  
  
5. Задание
Какие из данных функций определены корректно:
  > lambda a, b: 42
  > lambda a=42: a
  > lambda *a: a + a
  > lambda: 42
  
  
6. Задание
Какие из данных парадигм поддерживает Python:
  > Императивное программирование
  > Функциональное программирование
  
  
7. Задание
Есть код:
# @f
# def g():
Какому коду он эквивалентен:
  > def g():
  > ...
  > g = f(g)
  
  
8. Задание
Какие задачи можно эффективно решать с использованием паттерна "декоратор":
  > Добавить информацию о времени работы нескольких функций в вывод программы
  > Кешировать результат работы функции
  
  
9. Задание
Есть код:
#  a = []
# for i in range(10):
#  if i % 2 == 0:
#   a.append(i*i)
Как записать его в одну строку:
  > a = [i*i for i in range(10) if i % 2 == 0]
  
  
10. Задание
Есть матрица m, представленная в виде списка списков. Как её "разровнять", т.е. превратить в один список. Например, [[1,2], [3, 4]] -> [1, 2, 3, 4]
  > [x for y in m for x in y]
  
  
11. Задание
Что вернет выражение list(filter(lambda i: i, range(3)))?
  > [1, 2]
  
  
12. Задание
Что вернёт выражение list(map(lambda i: i + 1, filter(lambda i: i % 3 == 0, range(10))))?
  > [1, 4, 7, 10]
